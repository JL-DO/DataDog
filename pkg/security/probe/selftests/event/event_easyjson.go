// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package event

import (
	json "encoding/json"
	model "github.com/DataDog/datadog-agent/pkg/security/serializers/model"
	utils "github.com/DataDog/datadog-agent/pkg/security/utils"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecurityProbeSelftestsEvent(in *jlexer.Lexer, out *SelfTestEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "succeeded_tests":
			if in.IsNull() {
				in.Skip()
				out.Success = nil
			} else {
				in.Delim('[')
				if out.Success == nil {
					if !in.IsDelim(']') {
						out.Success = make([]string, 0, 4)
					} else {
						out.Success = []string{}
					}
				} else {
					out.Success = (out.Success)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Success = append(out.Success, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "failed_tests":
			if in.IsNull() {
				in.Skip()
				out.Fails = nil
			} else {
				in.Delim('[')
				if out.Fails == nil {
					if !in.IsDelim(']') {
						out.Fails = make([]string, 0, 4)
					} else {
						out.Fails = []string{}
					}
				} else {
					out.Fails = (out.Fails)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Fails = append(out.Fails, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "test_events":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.TestEvents = make(map[string]*model.EventSerializer)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 *model.EventSerializer
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						if v3 == nil {
							v3 = new(model.EventSerializer)
						}
						easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel(in, v3)
					}
					(out.TestEvents)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		case "service":
			out.Service = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecurityProbeSelftestsEvent(out *jwriter.Writer, in SelfTestEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"succeeded_tests\":"
		out.RawString(prefix[1:])
		if in.Success == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.Success {
				if v4 > 0 {
					out.RawByte(',')
				}
				out.String(string(v5))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"failed_tests\":"
		out.RawString(prefix)
		if in.Fails == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Fails {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"test_events\":"
		out.RawString(prefix)
		if in.TestEvents == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.TestEvents {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				if v8Value == nil {
					out.RawString("null")
				} else {
					easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel(out, *v8Value)
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Raw((in.Timestamp).MarshalJSON())
	}
	{
		const prefix string = ",\"service\":"
		out.RawString(prefix)
		out.String(string(in.Service))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SelfTestEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecurityProbeSelftestsEvent(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SelfTestEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecurityProbeSelftestsEvent(l, v)
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel(in *jlexer.Lexer, out *model.EventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.BaseEventSerializer = new(model.BaseEventSerializer)
	out.SELinuxEventSerializer = new(model.SELinuxEventSerializer)
	out.BPFEventSerializer = new(model.BPFEventSerializer)
	out.MMapEventSerializer = new(model.MMapEventSerializer)
	out.MProtectEventSerializer = new(model.MProtectEventSerializer)
	out.PTraceEventSerializer = new(model.PTraceEventSerializer)
	out.ModuleEventSerializer = new(model.ModuleEventSerializer)
	out.SignalEventSerializer = new(model.SignalEventSerializer)
	out.SpliceEventSerializer = new(model.SpliceEventSerializer)
	out.DNSEventSerializer = new(model.DNSEventSerializer)
	out.BindEventSerializer = new(model.BindEventSerializer)
	out.MountEventSerializer = new(model.MountEventSerializer)
	out.AnomalyDetectionSyscallEventSerializer = new(model.AnomalyDetectionSyscallEventSerializer)
	out.UserContextSerializer = new(model.UserContextSerializer)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "selinux":
			if in.IsNull() {
				in.Skip()
				out.SELinuxEventSerializer = nil
			} else {
				if out.SELinuxEventSerializer == nil {
					out.SELinuxEventSerializer = new(model.SELinuxEventSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel1(in, out.SELinuxEventSerializer)
			}
		case "bpf":
			if in.IsNull() {
				in.Skip()
				out.BPFEventSerializer = nil
			} else {
				if out.BPFEventSerializer == nil {
					out.BPFEventSerializer = new(model.BPFEventSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel2(in, out.BPFEventSerializer)
			}
		case "mmap":
			if in.IsNull() {
				in.Skip()
				out.MMapEventSerializer = nil
			} else {
				if out.MMapEventSerializer == nil {
					out.MMapEventSerializer = new(model.MMapEventSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel3(in, out.MMapEventSerializer)
			}
		case "mprotect":
			if in.IsNull() {
				in.Skip()
				out.MProtectEventSerializer = nil
			} else {
				if out.MProtectEventSerializer == nil {
					out.MProtectEventSerializer = new(model.MProtectEventSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel4(in, out.MProtectEventSerializer)
			}
		case "ptrace":
			if in.IsNull() {
				in.Skip()
				out.PTraceEventSerializer = nil
			} else {
				if out.PTraceEventSerializer == nil {
					out.PTraceEventSerializer = new(model.PTraceEventSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel5(in, out.PTraceEventSerializer)
			}
		case "module":
			if in.IsNull() {
				in.Skip()
				out.ModuleEventSerializer = nil
			} else {
				if out.ModuleEventSerializer == nil {
					out.ModuleEventSerializer = new(model.ModuleEventSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel6(in, out.ModuleEventSerializer)
			}
		case "signal":
			if in.IsNull() {
				in.Skip()
				out.SignalEventSerializer = nil
			} else {
				if out.SignalEventSerializer == nil {
					out.SignalEventSerializer = new(model.SignalEventSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel7(in, out.SignalEventSerializer)
			}
		case "splice":
			if in.IsNull() {
				in.Skip()
				out.SpliceEventSerializer = nil
			} else {
				if out.SpliceEventSerializer == nil {
					out.SpliceEventSerializer = new(model.SpliceEventSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel8(in, out.SpliceEventSerializer)
			}
		case "dns":
			if in.IsNull() {
				in.Skip()
				out.DNSEventSerializer = nil
			} else {
				if out.DNSEventSerializer == nil {
					out.DNSEventSerializer = new(model.DNSEventSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel9(in, out.DNSEventSerializer)
			}
		case "bind":
			if in.IsNull() {
				in.Skip()
				out.BindEventSerializer = nil
			} else {
				if out.BindEventSerializer == nil {
					out.BindEventSerializer = new(model.BindEventSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel10(in, out.BindEventSerializer)
			}
		case "mount":
			if in.IsNull() {
				in.Skip()
				out.MountEventSerializer = nil
			} else {
				if out.MountEventSerializer == nil {
					out.MountEventSerializer = new(model.MountEventSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel11(in, out.MountEventSerializer)
			}
		case "anomaly_detection_syscall":
			if in.IsNull() {
				in.Skip()
				out.AnomalyDetectionSyscallEventSerializer = nil
			} else {
				if out.AnomalyDetectionSyscallEventSerializer == nil {
					out.AnomalyDetectionSyscallEventSerializer = new(model.AnomalyDetectionSyscallEventSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel12(in, out.AnomalyDetectionSyscallEventSerializer)
			}
		case "usr":
			if in.IsNull() {
				in.Skip()
				out.UserContextSerializer = nil
			} else {
				if out.UserContextSerializer == nil {
					out.UserContextSerializer = new(model.UserContextSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel13(in, out.UserContextSerializer)
			}
		case "evt":
			easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel14(in, &out.EventContextSerializer)
		case "date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "file":
			if in.IsNull() {
				in.Skip()
				out.FileEventSerializer = nil
			} else {
				if out.FileEventSerializer == nil {
					out.FileEventSerializer = new(model.FileEventSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel15(in, out.FileEventSerializer)
			}
		case "network":
			if in.IsNull() {
				in.Skip()
				out.NetworkContextSerializer = nil
			} else {
				if out.NetworkContextSerializer == nil {
					out.NetworkContextSerializer = new(model.NetworkContextSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel16(in, out.NetworkContextSerializer)
			}
		case "exit":
			if in.IsNull() {
				in.Skip()
				out.ExitEventSerializer = nil
			} else {
				if out.ExitEventSerializer == nil {
					out.ExitEventSerializer = new(model.ExitEventSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel17(in, out.ExitEventSerializer)
			}
		case "process":
			if in.IsNull() {
				in.Skip()
				out.ProcessContextSerializer = nil
			} else {
				if out.ProcessContextSerializer == nil {
					out.ProcessContextSerializer = new(model.ProcessContextSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel18(in, out.ProcessContextSerializer)
			}
		case "dd":
			if in.IsNull() {
				in.Skip()
				out.DDContextSerializer = nil
			} else {
				if out.DDContextSerializer == nil {
					out.DDContextSerializer = new(model.DDContextSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel19(in, out.DDContextSerializer)
			}
		case "container":
			if in.IsNull() {
				in.Skip()
				out.ContainerContextSerializer = nil
			} else {
				if out.ContainerContextSerializer == nil {
					out.ContainerContextSerializer = new(model.ContainerContextSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel20(in, out.ContainerContextSerializer)
			}
		case "security_profile":
			if in.IsNull() {
				in.Skip()
				out.SecurityProfileContextSerializer = nil
			} else {
				if out.SecurityProfileContextSerializer == nil {
					out.SecurityProfileContextSerializer = new(model.SecurityProfileContextSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel21(in, out.SecurityProfileContextSerializer)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel(out *jwriter.Writer, in model.EventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SELinuxEventSerializer != nil {
		const prefix string = ",\"selinux\":"
		first = false
		out.RawString(prefix[1:])
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel1(out, *in.SELinuxEventSerializer)
	}
	if in.BPFEventSerializer != nil {
		const prefix string = ",\"bpf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel2(out, *in.BPFEventSerializer)
	}
	if in.MMapEventSerializer != nil {
		const prefix string = ",\"mmap\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel3(out, *in.MMapEventSerializer)
	}
	if in.MProtectEventSerializer != nil {
		const prefix string = ",\"mprotect\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel4(out, *in.MProtectEventSerializer)
	}
	if in.PTraceEventSerializer != nil {
		const prefix string = ",\"ptrace\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel5(out, *in.PTraceEventSerializer)
	}
	if in.ModuleEventSerializer != nil {
		const prefix string = ",\"module\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel6(out, *in.ModuleEventSerializer)
	}
	if in.SignalEventSerializer != nil {
		const prefix string = ",\"signal\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel7(out, *in.SignalEventSerializer)
	}
	if in.SpliceEventSerializer != nil {
		const prefix string = ",\"splice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel8(out, *in.SpliceEventSerializer)
	}
	if in.DNSEventSerializer != nil {
		const prefix string = ",\"dns\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel9(out, *in.DNSEventSerializer)
	}
	if in.BindEventSerializer != nil {
		const prefix string = ",\"bind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel10(out, *in.BindEventSerializer)
	}
	if in.MountEventSerializer != nil {
		const prefix string = ",\"mount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel11(out, *in.MountEventSerializer)
	}
	if in.AnomalyDetectionSyscallEventSerializer != nil {
		const prefix string = ",\"anomaly_detection_syscall\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel12(out, *in.AnomalyDetectionSyscallEventSerializer)
	}
	if in.UserContextSerializer != nil {
		const prefix string = ",\"usr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel13(out, *in.UserContextSerializer)
	}
	if true {
		const prefix string = ",\"evt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel14(out, in.EventContextSerializer)
	}
	if true {
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Date).MarshalEasyJSON(out)
	}
	if in.FileEventSerializer != nil {
		const prefix string = ",\"file\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel15(out, *in.FileEventSerializer)
	}
	if in.NetworkContextSerializer != nil {
		const prefix string = ",\"network\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel16(out, *in.NetworkContextSerializer)
	}
	if in.ExitEventSerializer != nil {
		const prefix string = ",\"exit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel17(out, *in.ExitEventSerializer)
	}
	if in.ProcessContextSerializer != nil {
		const prefix string = ",\"process\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel18(out, *in.ProcessContextSerializer)
	}
	if in.DDContextSerializer != nil {
		const prefix string = ",\"dd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel19(out, *in.DDContextSerializer)
	}
	if in.ContainerContextSerializer != nil {
		const prefix string = ",\"container\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel20(out, *in.ContainerContextSerializer)
	}
	if in.SecurityProfileContextSerializer != nil {
		const prefix string = ",\"security_profile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel21(out, *in.SecurityProfileContextSerializer)
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel21(in *jlexer.Lexer, out *model.SecurityProfileContextSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v9 string
					v9 = string(in.String())
					out.Tags = append(out.Tags, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel21(out *jwriter.Writer, in model.SecurityProfileContextSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Tags {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel20(in *jlexer.Lexer, out *model.ContainerContextSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel20(out *jwriter.Writer, in model.ContainerContextSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CreatedAt).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel19(in *jlexer.Lexer, out *model.DDContextSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "span_id":
			out.SpanID = uint64(in.Uint64())
		case "trace_id":
			out.TraceID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel19(out *jwriter.Writer, in model.DDContextSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SpanID != 0 {
		const prefix string = ",\"span_id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.SpanID))
	}
	if in.TraceID != 0 {
		const prefix string = ",\"trace_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.TraceID))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel18(in *jlexer.Lexer, out *model.ProcessContextSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.ProcessSerializer = new(model.ProcessSerializer)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "parent":
			if in.IsNull() {
				in.Skip()
				out.Parent = nil
			} else {
				if out.Parent == nil {
					out.Parent = new(model.ProcessSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel22(in, out.Parent)
			}
		case "ancestors":
			if in.IsNull() {
				in.Skip()
				out.Ancestors = nil
			} else {
				in.Delim('[')
				if out.Ancestors == nil {
					if !in.IsDelim(']') {
						out.Ancestors = make([]*model.ProcessSerializer, 0, 8)
					} else {
						out.Ancestors = []*model.ProcessSerializer{}
					}
				} else {
					out.Ancestors = (out.Ancestors)[:0]
				}
				for !in.IsDelim(']') {
					var v12 *model.ProcessSerializer
					if in.IsNull() {
						in.Skip()
						v12 = nil
					} else {
						if v12 == nil {
							v12 = new(model.ProcessSerializer)
						}
						easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel22(in, v12)
					}
					out.Ancestors = append(out.Ancestors, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pid":
			out.Pid = uint32(in.Uint32())
		case "ppid":
			if in.IsNull() {
				in.Skip()
				out.PPid = nil
			} else {
				if out.PPid == nil {
					out.PPid = new(uint32)
				}
				*out.PPid = uint32(in.Uint32())
			}
		case "tid":
			out.Tid = uint32(in.Uint32())
		case "uid":
			out.UID = int(in.Int())
		case "gid":
			out.GID = int(in.Int())
		case "user":
			out.User = string(in.String())
		case "group":
			out.Group = string(in.String())
		case "path_resolution_error":
			out.PathResolutionError = string(in.String())
		case "comm":
			out.Comm = string(in.String())
		case "tty":
			out.TTY = string(in.String())
		case "fork_time":
			if in.IsNull() {
				in.Skip()
				out.ForkTime = nil
			} else {
				if out.ForkTime == nil {
					out.ForkTime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ForkTime).UnmarshalJSON(data))
				}
			}
		case "exec_time":
			if in.IsNull() {
				in.Skip()
				out.ExecTime = nil
			} else {
				if out.ExecTime == nil {
					out.ExecTime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ExecTime).UnmarshalJSON(data))
				}
			}
		case "exit_time":
			if in.IsNull() {
				in.Skip()
				out.ExitTime = nil
			} else {
				if out.ExitTime == nil {
					out.ExitTime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ExitTime).UnmarshalJSON(data))
				}
			}
		case "credentials":
			if in.IsNull() {
				in.Skip()
				out.Credentials = nil
			} else {
				if out.Credentials == nil {
					out.Credentials = new(model.ProcessCredentialsSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel23(in, out.Credentials)
			}
		case "executable":
			if in.IsNull() {
				in.Skip()
				out.Executable = nil
			} else {
				if out.Executable == nil {
					out.Executable = new(model.FileSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel24(in, out.Executable)
			}
		case "interpreter":
			if in.IsNull() {
				in.Skip()
				out.Interpreter = nil
			} else {
				if out.Interpreter == nil {
					out.Interpreter = new(model.FileSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel24(in, out.Interpreter)
			}
		case "container":
			if in.IsNull() {
				in.Skip()
				out.Container = nil
			} else {
				if out.Container == nil {
					out.Container = new(model.ContainerContextSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel20(in, out.Container)
			}
		case "argv0":
			out.Argv0 = string(in.String())
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]string, 0, 4)
					} else {
						out.Args = []string{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.Args = append(out.Args, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "args_truncated":
			out.ArgsTruncated = bool(in.Bool())
		case "envs":
			if in.IsNull() {
				in.Skip()
				out.Envs = nil
			} else {
				in.Delim('[')
				if out.Envs == nil {
					if !in.IsDelim(']') {
						out.Envs = make([]string, 0, 4)
					} else {
						out.Envs = []string{}
					}
				} else {
					out.Envs = (out.Envs)[:0]
				}
				for !in.IsDelim(']') {
					var v14 string
					v14 = string(in.String())
					out.Envs = append(out.Envs, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "envs_truncated":
			out.EnvsTruncated = bool(in.Bool())
		case "is_thread":
			out.IsThread = bool(in.Bool())
		case "is_kworker":
			out.IsKworker = bool(in.Bool())
		case "is_exec_child":
			out.IsExecChild = bool(in.Bool())
		case "source":
			out.Source = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel18(out *jwriter.Writer, in model.ProcessContextSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Parent != nil {
		const prefix string = ",\"parent\":"
		first = false
		out.RawString(prefix[1:])
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel22(out, *in.Parent)
	}
	if len(in.Ancestors) != 0 {
		const prefix string = ",\"ancestors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v15, v16 := range in.Ancestors {
				if v15 > 0 {
					out.RawByte(',')
				}
				if v16 == nil {
					out.RawString("null")
				} else {
					easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel22(out, *v16)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Pid != 0 {
		const prefix string = ",\"pid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Pid))
	}
	if in.PPid != nil {
		const prefix string = ",\"ppid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.PPid))
	}
	if in.Tid != 0 {
		const prefix string = ",\"tid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Tid))
	}
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UID))
	}
	{
		const prefix string = ",\"gid\":"
		out.RawString(prefix)
		out.Int(int(in.GID))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	if in.PathResolutionError != "" {
		const prefix string = ",\"path_resolution_error\":"
		out.RawString(prefix)
		out.String(string(in.PathResolutionError))
	}
	if in.Comm != "" {
		const prefix string = ",\"comm\":"
		out.RawString(prefix)
		out.String(string(in.Comm))
	}
	if in.TTY != "" {
		const prefix string = ",\"tty\":"
		out.RawString(prefix)
		out.String(string(in.TTY))
	}
	if in.ForkTime != nil {
		const prefix string = ",\"fork_time\":"
		out.RawString(prefix)
		(*in.ForkTime).MarshalEasyJSON(out)
	}
	if in.ExecTime != nil {
		const prefix string = ",\"exec_time\":"
		out.RawString(prefix)
		(*in.ExecTime).MarshalEasyJSON(out)
	}
	if in.ExitTime != nil {
		const prefix string = ",\"exit_time\":"
		out.RawString(prefix)
		(*in.ExitTime).MarshalEasyJSON(out)
	}
	if in.Credentials != nil {
		const prefix string = ",\"credentials\":"
		out.RawString(prefix)
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel23(out, *in.Credentials)
	}
	if in.Executable != nil {
		const prefix string = ",\"executable\":"
		out.RawString(prefix)
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel24(out, *in.Executable)
	}
	if in.Interpreter != nil {
		const prefix string = ",\"interpreter\":"
		out.RawString(prefix)
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel24(out, *in.Interpreter)
	}
	if in.Container != nil {
		const prefix string = ",\"container\":"
		out.RawString(prefix)
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel20(out, *in.Container)
	}
	if in.Argv0 != "" {
		const prefix string = ",\"argv0\":"
		out.RawString(prefix)
		out.String(string(in.Argv0))
	}
	if len(in.Args) != 0 {
		const prefix string = ",\"args\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v17, v18 := range in.Args {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	if in.ArgsTruncated {
		const prefix string = ",\"args_truncated\":"
		out.RawString(prefix)
		out.Bool(bool(in.ArgsTruncated))
	}
	if len(in.Envs) != 0 {
		const prefix string = ",\"envs\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v19, v20 := range in.Envs {
				if v19 > 0 {
					out.RawByte(',')
				}
				out.String(string(v20))
			}
			out.RawByte(']')
		}
	}
	if in.EnvsTruncated {
		const prefix string = ",\"envs_truncated\":"
		out.RawString(prefix)
		out.Bool(bool(in.EnvsTruncated))
	}
	if in.IsThread {
		const prefix string = ",\"is_thread\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsThread))
	}
	if in.IsKworker {
		const prefix string = ",\"is_kworker\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsKworker))
	}
	if in.IsExecChild {
		const prefix string = ",\"is_exec_child\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsExecChild))
	}
	if in.Source != "" {
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel24(in *jlexer.Lexer, out *model.FileSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "path_resolution_error":
			out.PathResolutionError = string(in.String())
		case "inode":
			if in.IsNull() {
				in.Skip()
				out.Inode = nil
			} else {
				if out.Inode == nil {
					out.Inode = new(uint64)
				}
				*out.Inode = uint64(in.Uint64())
			}
		case "mode":
			if in.IsNull() {
				in.Skip()
				out.Mode = nil
			} else {
				if out.Mode == nil {
					out.Mode = new(uint32)
				}
				*out.Mode = uint32(in.Uint32())
			}
		case "in_upper_layer":
			if in.IsNull() {
				in.Skip()
				out.InUpperLayer = nil
			} else {
				if out.InUpperLayer == nil {
					out.InUpperLayer = new(bool)
				}
				*out.InUpperLayer = bool(in.Bool())
			}
		case "mount_id":
			if in.IsNull() {
				in.Skip()
				out.MountID = nil
			} else {
				if out.MountID == nil {
					out.MountID = new(uint32)
				}
				*out.MountID = uint32(in.Uint32())
			}
		case "filesystem":
			out.Filesystem = string(in.String())
		case "uid":
			out.UID = int64(in.Int64())
		case "gid":
			out.GID = int64(in.Int64())
		case "user":
			out.User = string(in.String())
		case "group":
			out.Group = string(in.String())
		case "attribute_name":
			out.XAttrName = string(in.String())
		case "attribute_namespace":
			out.XAttrNamespace = string(in.String())
		case "flags":
			if in.IsNull() {
				in.Skip()
				out.Flags = nil
			} else {
				in.Delim('[')
				if out.Flags == nil {
					if !in.IsDelim(']') {
						out.Flags = make([]string, 0, 4)
					} else {
						out.Flags = []string{}
					}
				} else {
					out.Flags = (out.Flags)[:0]
				}
				for !in.IsDelim(']') {
					var v21 string
					v21 = string(in.String())
					out.Flags = append(out.Flags, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "access_time":
			if in.IsNull() {
				in.Skip()
				out.Atime = nil
			} else {
				if out.Atime == nil {
					out.Atime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Atime).UnmarshalJSON(data))
				}
			}
		case "modification_time":
			if in.IsNull() {
				in.Skip()
				out.Mtime = nil
			} else {
				if out.Mtime == nil {
					out.Mtime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Mtime).UnmarshalJSON(data))
				}
			}
		case "change_time":
			if in.IsNull() {
				in.Skip()
				out.Ctime = nil
			} else {
				if out.Ctime == nil {
					out.Ctime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Ctime).UnmarshalJSON(data))
				}
			}
		case "package_name":
			out.PackageName = string(in.String())
		case "package_version":
			out.PackageVersion = string(in.String())
		case "hashes":
			if in.IsNull() {
				in.Skip()
				out.Hashes = nil
			} else {
				in.Delim('[')
				if out.Hashes == nil {
					if !in.IsDelim(']') {
						out.Hashes = make([]string, 0, 4)
					} else {
						out.Hashes = []string{}
					}
				} else {
					out.Hashes = (out.Hashes)[:0]
				}
				for !in.IsDelim(']') {
					var v22 string
					v22 = string(in.String())
					out.Hashes = append(out.Hashes, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hash_state":
			out.HashState = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel24(out *jwriter.Writer, in model.FileSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Path != "" {
		const prefix string = ",\"path\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Path))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.PathResolutionError != "" {
		const prefix string = ",\"path_resolution_error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PathResolutionError))
	}
	if in.Inode != nil {
		const prefix string = ",\"inode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(*in.Inode))
	}
	if in.Mode != nil {
		const prefix string = ",\"mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.Mode))
	}
	if in.InUpperLayer != nil {
		const prefix string = ",\"in_upper_layer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.InUpperLayer))
	}
	if in.MountID != nil {
		const prefix string = ",\"mount_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.MountID))
	}
	if in.Filesystem != "" {
		const prefix string = ",\"filesystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Filesystem))
	}
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.UID))
	}
	{
		const prefix string = ",\"gid\":"
		out.RawString(prefix)
		out.Int64(int64(in.GID))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	if in.XAttrName != "" {
		const prefix string = ",\"attribute_name\":"
		out.RawString(prefix)
		out.String(string(in.XAttrName))
	}
	if in.XAttrNamespace != "" {
		const prefix string = ",\"attribute_namespace\":"
		out.RawString(prefix)
		out.String(string(in.XAttrNamespace))
	}
	if len(in.Flags) != 0 {
		const prefix string = ",\"flags\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v23, v24 := range in.Flags {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	if in.Atime != nil {
		const prefix string = ",\"access_time\":"
		out.RawString(prefix)
		(*in.Atime).MarshalEasyJSON(out)
	}
	if in.Mtime != nil {
		const prefix string = ",\"modification_time\":"
		out.RawString(prefix)
		(*in.Mtime).MarshalEasyJSON(out)
	}
	if in.Ctime != nil {
		const prefix string = ",\"change_time\":"
		out.RawString(prefix)
		(*in.Ctime).MarshalEasyJSON(out)
	}
	if in.PackageName != "" {
		const prefix string = ",\"package_name\":"
		out.RawString(prefix)
		out.String(string(in.PackageName))
	}
	if in.PackageVersion != "" {
		const prefix string = ",\"package_version\":"
		out.RawString(prefix)
		out.String(string(in.PackageVersion))
	}
	if len(in.Hashes) != 0 {
		const prefix string = ",\"hashes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v25, v26 := range in.Hashes {
				if v25 > 0 {
					out.RawByte(',')
				}
				out.String(string(v26))
			}
			out.RawByte(']')
		}
	}
	if in.HashState != "" {
		const prefix string = ",\"hash_state\":"
		out.RawString(prefix)
		out.String(string(in.HashState))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel23(in *jlexer.Lexer, out *model.ProcessCredentialsSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.CredentialsSerializer = new(model.CredentialsSerializer)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "destination":
			if m, ok := out.Destination.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Destination.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Destination = in.Interface()
			}
		case "uid":
			out.UID = int(in.Int())
		case "user":
			out.User = string(in.String())
		case "gid":
			out.GID = int(in.Int())
		case "group":
			out.Group = string(in.String())
		case "euid":
			out.EUID = int(in.Int())
		case "euser":
			out.EUser = string(in.String())
		case "egid":
			out.EGID = int(in.Int())
		case "egroup":
			out.EGroup = string(in.String())
		case "fsuid":
			out.FSUID = int(in.Int())
		case "fsuser":
			out.FSUser = string(in.String())
		case "fsgid":
			out.FSGID = int(in.Int())
		case "fsgroup":
			out.FSGroup = string(in.String())
		case "cap_effective":
			if in.IsNull() {
				in.Skip()
				out.CapEffective = nil
			} else {
				in.Delim('[')
				if out.CapEffective == nil {
					if !in.IsDelim(']') {
						out.CapEffective = make([]string, 0, 4)
					} else {
						out.CapEffective = []string{}
					}
				} else {
					out.CapEffective = (out.CapEffective)[:0]
				}
				for !in.IsDelim(']') {
					var v27 string
					v27 = string(in.String())
					out.CapEffective = append(out.CapEffective, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cap_permitted":
			if in.IsNull() {
				in.Skip()
				out.CapPermitted = nil
			} else {
				in.Delim('[')
				if out.CapPermitted == nil {
					if !in.IsDelim(']') {
						out.CapPermitted = make([]string, 0, 4)
					} else {
						out.CapPermitted = []string{}
					}
				} else {
					out.CapPermitted = (out.CapPermitted)[:0]
				}
				for !in.IsDelim(']') {
					var v28 string
					v28 = string(in.String())
					out.CapPermitted = append(out.CapPermitted, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel23(out *jwriter.Writer, in model.ProcessCredentialsSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Destination != nil {
		const prefix string = ",\"destination\":"
		first = false
		out.RawString(prefix[1:])
		if m, ok := in.Destination.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Destination.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Destination))
		}
	}
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UID))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	{
		const prefix string = ",\"gid\":"
		out.RawString(prefix)
		out.Int(int(in.GID))
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	{
		const prefix string = ",\"euid\":"
		out.RawString(prefix)
		out.Int(int(in.EUID))
	}
	if in.EUser != "" {
		const prefix string = ",\"euser\":"
		out.RawString(prefix)
		out.String(string(in.EUser))
	}
	{
		const prefix string = ",\"egid\":"
		out.RawString(prefix)
		out.Int(int(in.EGID))
	}
	if in.EGroup != "" {
		const prefix string = ",\"egroup\":"
		out.RawString(prefix)
		out.String(string(in.EGroup))
	}
	{
		const prefix string = ",\"fsuid\":"
		out.RawString(prefix)
		out.Int(int(in.FSUID))
	}
	if in.FSUser != "" {
		const prefix string = ",\"fsuser\":"
		out.RawString(prefix)
		out.String(string(in.FSUser))
	}
	{
		const prefix string = ",\"fsgid\":"
		out.RawString(prefix)
		out.Int(int(in.FSGID))
	}
	if in.FSGroup != "" {
		const prefix string = ",\"fsgroup\":"
		out.RawString(prefix)
		out.String(string(in.FSGroup))
	}
	{
		const prefix string = ",\"cap_effective\":"
		out.RawString(prefix)
		if in.CapEffective == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.CapEffective {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.String(string(v30))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cap_permitted\":"
		out.RawString(prefix)
		if in.CapPermitted == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v31, v32 := range in.CapPermitted {
				if v31 > 0 {
					out.RawByte(',')
				}
				out.String(string(v32))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel22(in *jlexer.Lexer, out *model.ProcessSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pid":
			out.Pid = uint32(in.Uint32())
		case "ppid":
			if in.IsNull() {
				in.Skip()
				out.PPid = nil
			} else {
				if out.PPid == nil {
					out.PPid = new(uint32)
				}
				*out.PPid = uint32(in.Uint32())
			}
		case "tid":
			out.Tid = uint32(in.Uint32())
		case "uid":
			out.UID = int(in.Int())
		case "gid":
			out.GID = int(in.Int())
		case "user":
			out.User = string(in.String())
		case "group":
			out.Group = string(in.String())
		case "path_resolution_error":
			out.PathResolutionError = string(in.String())
		case "comm":
			out.Comm = string(in.String())
		case "tty":
			out.TTY = string(in.String())
		case "fork_time":
			if in.IsNull() {
				in.Skip()
				out.ForkTime = nil
			} else {
				if out.ForkTime == nil {
					out.ForkTime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ForkTime).UnmarshalJSON(data))
				}
			}
		case "exec_time":
			if in.IsNull() {
				in.Skip()
				out.ExecTime = nil
			} else {
				if out.ExecTime == nil {
					out.ExecTime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ExecTime).UnmarshalJSON(data))
				}
			}
		case "exit_time":
			if in.IsNull() {
				in.Skip()
				out.ExitTime = nil
			} else {
				if out.ExitTime == nil {
					out.ExitTime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ExitTime).UnmarshalJSON(data))
				}
			}
		case "credentials":
			if in.IsNull() {
				in.Skip()
				out.Credentials = nil
			} else {
				if out.Credentials == nil {
					out.Credentials = new(model.ProcessCredentialsSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel23(in, out.Credentials)
			}
		case "executable":
			if in.IsNull() {
				in.Skip()
				out.Executable = nil
			} else {
				if out.Executable == nil {
					out.Executable = new(model.FileSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel24(in, out.Executable)
			}
		case "interpreter":
			if in.IsNull() {
				in.Skip()
				out.Interpreter = nil
			} else {
				if out.Interpreter == nil {
					out.Interpreter = new(model.FileSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel24(in, out.Interpreter)
			}
		case "container":
			if in.IsNull() {
				in.Skip()
				out.Container = nil
			} else {
				if out.Container == nil {
					out.Container = new(model.ContainerContextSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel20(in, out.Container)
			}
		case "argv0":
			out.Argv0 = string(in.String())
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]string, 0, 4)
					} else {
						out.Args = []string{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v33 string
					v33 = string(in.String())
					out.Args = append(out.Args, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "args_truncated":
			out.ArgsTruncated = bool(in.Bool())
		case "envs":
			if in.IsNull() {
				in.Skip()
				out.Envs = nil
			} else {
				in.Delim('[')
				if out.Envs == nil {
					if !in.IsDelim(']') {
						out.Envs = make([]string, 0, 4)
					} else {
						out.Envs = []string{}
					}
				} else {
					out.Envs = (out.Envs)[:0]
				}
				for !in.IsDelim(']') {
					var v34 string
					v34 = string(in.String())
					out.Envs = append(out.Envs, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "envs_truncated":
			out.EnvsTruncated = bool(in.Bool())
		case "is_thread":
			out.IsThread = bool(in.Bool())
		case "is_kworker":
			out.IsKworker = bool(in.Bool())
		case "is_exec_child":
			out.IsExecChild = bool(in.Bool())
		case "source":
			out.Source = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel22(out *jwriter.Writer, in model.ProcessSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Pid != 0 {
		const prefix string = ",\"pid\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Pid))
	}
	if in.PPid != nil {
		const prefix string = ",\"ppid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.PPid))
	}
	if in.Tid != 0 {
		const prefix string = ",\"tid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Tid))
	}
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UID))
	}
	{
		const prefix string = ",\"gid\":"
		out.RawString(prefix)
		out.Int(int(in.GID))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	if in.PathResolutionError != "" {
		const prefix string = ",\"path_resolution_error\":"
		out.RawString(prefix)
		out.String(string(in.PathResolutionError))
	}
	if in.Comm != "" {
		const prefix string = ",\"comm\":"
		out.RawString(prefix)
		out.String(string(in.Comm))
	}
	if in.TTY != "" {
		const prefix string = ",\"tty\":"
		out.RawString(prefix)
		out.String(string(in.TTY))
	}
	if in.ForkTime != nil {
		const prefix string = ",\"fork_time\":"
		out.RawString(prefix)
		(*in.ForkTime).MarshalEasyJSON(out)
	}
	if in.ExecTime != nil {
		const prefix string = ",\"exec_time\":"
		out.RawString(prefix)
		(*in.ExecTime).MarshalEasyJSON(out)
	}
	if in.ExitTime != nil {
		const prefix string = ",\"exit_time\":"
		out.RawString(prefix)
		(*in.ExitTime).MarshalEasyJSON(out)
	}
	if in.Credentials != nil {
		const prefix string = ",\"credentials\":"
		out.RawString(prefix)
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel23(out, *in.Credentials)
	}
	if in.Executable != nil {
		const prefix string = ",\"executable\":"
		out.RawString(prefix)
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel24(out, *in.Executable)
	}
	if in.Interpreter != nil {
		const prefix string = ",\"interpreter\":"
		out.RawString(prefix)
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel24(out, *in.Interpreter)
	}
	if in.Container != nil {
		const prefix string = ",\"container\":"
		out.RawString(prefix)
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel20(out, *in.Container)
	}
	if in.Argv0 != "" {
		const prefix string = ",\"argv0\":"
		out.RawString(prefix)
		out.String(string(in.Argv0))
	}
	if len(in.Args) != 0 {
		const prefix string = ",\"args\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v35, v36 := range in.Args {
				if v35 > 0 {
					out.RawByte(',')
				}
				out.String(string(v36))
			}
			out.RawByte(']')
		}
	}
	if in.ArgsTruncated {
		const prefix string = ",\"args_truncated\":"
		out.RawString(prefix)
		out.Bool(bool(in.ArgsTruncated))
	}
	if len(in.Envs) != 0 {
		const prefix string = ",\"envs\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v37, v38 := range in.Envs {
				if v37 > 0 {
					out.RawByte(',')
				}
				out.String(string(v38))
			}
			out.RawByte(']')
		}
	}
	if in.EnvsTruncated {
		const prefix string = ",\"envs_truncated\":"
		out.RawString(prefix)
		out.Bool(bool(in.EnvsTruncated))
	}
	if in.IsThread {
		const prefix string = ",\"is_thread\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsThread))
	}
	if in.IsKworker {
		const prefix string = ",\"is_kworker\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsKworker))
	}
	if in.IsExecChild {
		const prefix string = ",\"is_exec_child\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsExecChild))
	}
	if in.Source != "" {
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel17(in *jlexer.Lexer, out *model.ExitEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cause":
			out.Cause = string(in.String())
		case "code":
			out.Code = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel17(out *jwriter.Writer, in model.ExitEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cause\":"
		out.RawString(prefix[1:])
		out.String(string(in.Cause))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Code))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel16(in *jlexer.Lexer, out *model.NetworkContextSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "device":
			if in.IsNull() {
				in.Skip()
				out.Device = nil
			} else {
				if out.Device == nil {
					out.Device = new(model.NetworkDeviceSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel25(in, out.Device)
			}
		case "l3_protocol":
			out.L3Protocol = string(in.String())
		case "l4_protocol":
			out.L4Protocol = string(in.String())
		case "source":
			easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel26(in, &out.Source)
		case "destination":
			easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel26(in, &out.Destination)
		case "size":
			out.Size = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel16(out *jwriter.Writer, in model.NetworkContextSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Device != nil {
		const prefix string = ",\"device\":"
		first = false
		out.RawString(prefix[1:])
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel25(out, *in.Device)
	}
	{
		const prefix string = ",\"l3_protocol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.L3Protocol))
	}
	{
		const prefix string = ",\"l4_protocol\":"
		out.RawString(prefix)
		out.String(string(in.L4Protocol))
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel26(out, in.Source)
	}
	{
		const prefix string = ",\"destination\":"
		out.RawString(prefix)
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel26(out, in.Destination)
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Size))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel26(in *jlexer.Lexer, out *model.IPPortSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ip":
			out.IP = string(in.String())
		case "port":
			out.Port = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel26(out *jwriter.Writer, in model.IPPortSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix[1:])
		out.String(string(in.IP))
	}
	{
		const prefix string = ",\"port\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Port))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel25(in *jlexer.Lexer, out *model.NetworkDeviceSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "netns":
			out.NetNS = uint32(in.Uint32())
		case "ifindex":
			out.IfIndex = uint32(in.Uint32())
		case "ifname":
			out.IfName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel25(out *jwriter.Writer, in model.NetworkDeviceSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"netns\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.NetNS))
	}
	{
		const prefix string = ",\"ifindex\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.IfIndex))
	}
	{
		const prefix string = ",\"ifname\":"
		out.RawString(prefix)
		out.String(string(in.IfName))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel15(in *jlexer.Lexer, out *model.FileEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "destination":
			if in.IsNull() {
				in.Skip()
				out.Destination = nil
			} else {
				if out.Destination == nil {
					out.Destination = new(model.FileSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel24(in, out.Destination)
			}
		case "new_mount_id":
			out.NewMountID = uint32(in.Uint32())
		case "device":
			out.Device = uint32(in.Uint32())
		case "fstype":
			out.FSType = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "path_resolution_error":
			out.PathResolutionError = string(in.String())
		case "inode":
			if in.IsNull() {
				in.Skip()
				out.Inode = nil
			} else {
				if out.Inode == nil {
					out.Inode = new(uint64)
				}
				*out.Inode = uint64(in.Uint64())
			}
		case "mode":
			if in.IsNull() {
				in.Skip()
				out.Mode = nil
			} else {
				if out.Mode == nil {
					out.Mode = new(uint32)
				}
				*out.Mode = uint32(in.Uint32())
			}
		case "in_upper_layer":
			if in.IsNull() {
				in.Skip()
				out.InUpperLayer = nil
			} else {
				if out.InUpperLayer == nil {
					out.InUpperLayer = new(bool)
				}
				*out.InUpperLayer = bool(in.Bool())
			}
		case "mount_id":
			if in.IsNull() {
				in.Skip()
				out.MountID = nil
			} else {
				if out.MountID == nil {
					out.MountID = new(uint32)
				}
				*out.MountID = uint32(in.Uint32())
			}
		case "filesystem":
			out.Filesystem = string(in.String())
		case "uid":
			out.UID = int64(in.Int64())
		case "gid":
			out.GID = int64(in.Int64())
		case "user":
			out.User = string(in.String())
		case "group":
			out.Group = string(in.String())
		case "attribute_name":
			out.XAttrName = string(in.String())
		case "attribute_namespace":
			out.XAttrNamespace = string(in.String())
		case "flags":
			if in.IsNull() {
				in.Skip()
				out.Flags = nil
			} else {
				in.Delim('[')
				if out.Flags == nil {
					if !in.IsDelim(']') {
						out.Flags = make([]string, 0, 4)
					} else {
						out.Flags = []string{}
					}
				} else {
					out.Flags = (out.Flags)[:0]
				}
				for !in.IsDelim(']') {
					var v39 string
					v39 = string(in.String())
					out.Flags = append(out.Flags, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "access_time":
			if in.IsNull() {
				in.Skip()
				out.Atime = nil
			} else {
				if out.Atime == nil {
					out.Atime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Atime).UnmarshalJSON(data))
				}
			}
		case "modification_time":
			if in.IsNull() {
				in.Skip()
				out.Mtime = nil
			} else {
				if out.Mtime == nil {
					out.Mtime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Mtime).UnmarshalJSON(data))
				}
			}
		case "change_time":
			if in.IsNull() {
				in.Skip()
				out.Ctime = nil
			} else {
				if out.Ctime == nil {
					out.Ctime = new(utils.EasyjsonTime)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Ctime).UnmarshalJSON(data))
				}
			}
		case "package_name":
			out.PackageName = string(in.String())
		case "package_version":
			out.PackageVersion = string(in.String())
		case "hashes":
			if in.IsNull() {
				in.Skip()
				out.Hashes = nil
			} else {
				in.Delim('[')
				if out.Hashes == nil {
					if !in.IsDelim(']') {
						out.Hashes = make([]string, 0, 4)
					} else {
						out.Hashes = []string{}
					}
				} else {
					out.Hashes = (out.Hashes)[:0]
				}
				for !in.IsDelim(']') {
					var v40 string
					v40 = string(in.String())
					out.Hashes = append(out.Hashes, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hash_state":
			out.HashState = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel15(out *jwriter.Writer, in model.FileEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Destination != nil {
		const prefix string = ",\"destination\":"
		first = false
		out.RawString(prefix[1:])
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel24(out, *in.Destination)
	}
	if in.NewMountID != 0 {
		const prefix string = ",\"new_mount_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.NewMountID))
	}
	if in.Device != 0 {
		const prefix string = ",\"device\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Device))
	}
	if in.FSType != "" {
		const prefix string = ",\"fstype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FSType))
	}
	if in.Path != "" {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.PathResolutionError != "" {
		const prefix string = ",\"path_resolution_error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PathResolutionError))
	}
	if in.Inode != nil {
		const prefix string = ",\"inode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(*in.Inode))
	}
	if in.Mode != nil {
		const prefix string = ",\"mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.Mode))
	}
	if in.InUpperLayer != nil {
		const prefix string = ",\"in_upper_layer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.InUpperLayer))
	}
	if in.MountID != nil {
		const prefix string = ",\"mount_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(*in.MountID))
	}
	if in.Filesystem != "" {
		const prefix string = ",\"filesystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Filesystem))
	}
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.UID))
	}
	{
		const prefix string = ",\"gid\":"
		out.RawString(prefix)
		out.Int64(int64(in.GID))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	if in.XAttrName != "" {
		const prefix string = ",\"attribute_name\":"
		out.RawString(prefix)
		out.String(string(in.XAttrName))
	}
	if in.XAttrNamespace != "" {
		const prefix string = ",\"attribute_namespace\":"
		out.RawString(prefix)
		out.String(string(in.XAttrNamespace))
	}
	if len(in.Flags) != 0 {
		const prefix string = ",\"flags\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v41, v42 := range in.Flags {
				if v41 > 0 {
					out.RawByte(',')
				}
				out.String(string(v42))
			}
			out.RawByte(']')
		}
	}
	if in.Atime != nil {
		const prefix string = ",\"access_time\":"
		out.RawString(prefix)
		(*in.Atime).MarshalEasyJSON(out)
	}
	if in.Mtime != nil {
		const prefix string = ",\"modification_time\":"
		out.RawString(prefix)
		(*in.Mtime).MarshalEasyJSON(out)
	}
	if in.Ctime != nil {
		const prefix string = ",\"change_time\":"
		out.RawString(prefix)
		(*in.Ctime).MarshalEasyJSON(out)
	}
	if in.PackageName != "" {
		const prefix string = ",\"package_name\":"
		out.RawString(prefix)
		out.String(string(in.PackageName))
	}
	if in.PackageVersion != "" {
		const prefix string = ",\"package_version\":"
		out.RawString(prefix)
		out.String(string(in.PackageVersion))
	}
	if len(in.Hashes) != 0 {
		const prefix string = ",\"hashes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v43, v44 := range in.Hashes {
				if v43 > 0 {
					out.RawByte(',')
				}
				out.String(string(v44))
			}
			out.RawByte(']')
		}
	}
	if in.HashState != "" {
		const prefix string = ",\"hash_state\":"
		out.RawString(prefix)
		out.String(string(in.HashState))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel14(in *jlexer.Lexer, out *model.EventContextSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "category":
			out.Category = string(in.String())
		case "outcome":
			out.Outcome = string(in.String())
		case "async":
			out.Async = bool(in.Bool())
		case "matched_rules":
			if in.IsNull() {
				in.Skip()
				out.MatchedRules = nil
			} else {
				in.Delim('[')
				if out.MatchedRules == nil {
					if !in.IsDelim(']') {
						out.MatchedRules = make([]model.MatchedRuleSerializer, 0, 0)
					} else {
						out.MatchedRules = []model.MatchedRuleSerializer{}
					}
				} else {
					out.MatchedRules = (out.MatchedRules)[:0]
				}
				for !in.IsDelim(']') {
					var v45 model.MatchedRuleSerializer
					easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel27(in, &v45)
					out.MatchedRules = append(out.MatchedRules, v45)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel14(out *jwriter.Writer, in model.EventContextSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Category != "" {
		const prefix string = ",\"category\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Category))
	}
	if in.Outcome != "" {
		const prefix string = ",\"outcome\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Outcome))
	}
	if in.Async {
		const prefix string = ",\"async\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Async))
	}
	if len(in.MatchedRules) != 0 {
		const prefix string = ",\"matched_rules\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v46, v47 := range in.MatchedRules {
				if v46 > 0 {
					out.RawByte(',')
				}
				easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel27(out, v47)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel27(in *jlexer.Lexer, out *model.MatchedRuleSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v48 string
					v48 = string(in.String())
					out.Tags = append(out.Tags, v48)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "policy_name":
			out.PolicyName = string(in.String())
		case "policy_version":
			out.PolicyVersion = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel27(out *jwriter.Writer, in model.MatchedRuleSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v49, v50 := range in.Tags {
				if v49 > 0 {
					out.RawByte(',')
				}
				out.String(string(v50))
			}
			out.RawByte(']')
		}
	}
	if in.PolicyName != "" {
		const prefix string = ",\"policy_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PolicyName))
	}
	if in.PolicyVersion != "" {
		const prefix string = ",\"policy_version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PolicyVersion))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel13(in *jlexer.Lexer, out *model.UserContextSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.User = string(in.String())
		case "group":
			out.Group = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel13(out *jwriter.Writer, in model.UserContextSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.User != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.User))
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Group))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel12(in *jlexer.Lexer, out *model.AnomalyDetectionSyscallEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "syscall":
			out.Syscall = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel12(out *jwriter.Writer, in model.AnomalyDetectionSyscallEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"syscall\":"
		out.RawString(prefix[1:])
		out.String(string(in.Syscall))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel11(in *jlexer.Lexer, out *model.MountEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mp":
			if in.IsNull() {
				in.Skip()
				out.MountPoint = nil
			} else {
				if out.MountPoint == nil {
					out.MountPoint = new(model.FileSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel24(in, out.MountPoint)
			}
		case "root":
			if in.IsNull() {
				in.Skip()
				out.Root = nil
			} else {
				if out.Root == nil {
					out.Root = new(model.FileSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel24(in, out.Root)
			}
		case "mount_id":
			out.MountID = uint32(in.Uint32())
		case "parent_mount_id":
			out.ParentMountID = uint32(in.Uint32())
		case "bind_src_mount_id":
			out.BindSrcMountID = uint32(in.Uint32())
		case "device":
			out.Device = uint32(in.Uint32())
		case "fs_type":
			out.FSType = string(in.String())
		case "mountpoint.path":
			out.MountPointPath = string(in.String())
		case "source.path":
			out.MountSourcePath = string(in.String())
		case "mountpoint.path_error":
			out.MountPointPathResolutionError = string(in.String())
		case "source.path_error":
			out.MountSourcePathResolutionError = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel11(out *jwriter.Writer, in model.MountEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MountPoint != nil {
		const prefix string = ",\"mp\":"
		first = false
		out.RawString(prefix[1:])
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel24(out, *in.MountPoint)
	}
	if in.Root != nil {
		const prefix string = ",\"root\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel24(out, *in.Root)
	}
	{
		const prefix string = ",\"mount_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.MountID))
	}
	{
		const prefix string = ",\"parent_mount_id\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.ParentMountID))
	}
	{
		const prefix string = ",\"bind_src_mount_id\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.BindSrcMountID))
	}
	{
		const prefix string = ",\"device\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Device))
	}
	if in.FSType != "" {
		const prefix string = ",\"fs_type\":"
		out.RawString(prefix)
		out.String(string(in.FSType))
	}
	if in.MountPointPath != "" {
		const prefix string = ",\"mountpoint.path\":"
		out.RawString(prefix)
		out.String(string(in.MountPointPath))
	}
	if in.MountSourcePath != "" {
		const prefix string = ",\"source.path\":"
		out.RawString(prefix)
		out.String(string(in.MountSourcePath))
	}
	if in.MountPointPathResolutionError != "" {
		const prefix string = ",\"mountpoint.path_error\":"
		out.RawString(prefix)
		out.String(string(in.MountPointPathResolutionError))
	}
	if in.MountSourcePathResolutionError != "" {
		const prefix string = ",\"source.path_error\":"
		out.RawString(prefix)
		out.String(string(in.MountSourcePathResolutionError))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel10(in *jlexer.Lexer, out *model.BindEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addr":
			easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel28(in, &out.Addr)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel10(out *jwriter.Writer, in model.BindEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"addr\":"
		out.RawString(prefix[1:])
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel28(out, in.Addr)
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel28(in *jlexer.Lexer, out *model.IPPortFamilySerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "family":
			out.Family = string(in.String())
		case "ip":
			out.IP = string(in.String())
		case "port":
			out.Port = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel28(out *jwriter.Writer, in model.IPPortFamilySerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"family\":"
		out.RawString(prefix[1:])
		out.String(string(in.Family))
	}
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix)
		out.String(string(in.IP))
	}
	{
		const prefix string = ",\"port\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Port))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel9(in *jlexer.Lexer, out *model.DNSEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint16(in.Uint16())
		case "question":
			easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel29(in, &out.Question)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel9(out *jwriter.Writer, in model.DNSEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.ID))
	}
	{
		const prefix string = ",\"question\":"
		out.RawString(prefix)
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel29(out, in.Question)
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel29(in *jlexer.Lexer, out *model.DNSQuestionSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "class":
			out.Class = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "size":
			out.Size = uint16(in.Uint16())
		case "count":
			out.Count = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel29(out *jwriter.Writer, in model.DNSQuestionSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"class\":"
		out.RawString(prefix[1:])
		out.String(string(in.Class))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Size))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Count))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel8(in *jlexer.Lexer, out *model.SpliceEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pipe_entry_flag":
			out.PipeEntryFlag = string(in.String())
		case "pipe_exit_flag":
			out.PipeExitFlag = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel8(out *jwriter.Writer, in model.SpliceEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pipe_entry_flag\":"
		out.RawString(prefix[1:])
		out.String(string(in.PipeEntryFlag))
	}
	{
		const prefix string = ",\"pipe_exit_flag\":"
		out.RawString(prefix)
		out.String(string(in.PipeExitFlag))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel7(in *jlexer.Lexer, out *model.SignalEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "pid":
			out.PID = uint32(in.Uint32())
		case "target":
			if in.IsNull() {
				in.Skip()
				out.Target = nil
			} else {
				if out.Target == nil {
					out.Target = new(model.ProcessContextSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel18(in, out.Target)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel7(out *jwriter.Writer, in model.SignalEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"pid\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.PID))
	}
	if in.Target != nil {
		const prefix string = ",\"target\":"
		out.RawString(prefix)
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel18(out, *in.Target)
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel6(in *jlexer.Lexer, out *model.ModuleEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "loaded_from_memory":
			if in.IsNull() {
				in.Skip()
				out.LoadedFromMemory = nil
			} else {
				if out.LoadedFromMemory == nil {
					out.LoadedFromMemory = new(bool)
				}
				*out.LoadedFromMemory = bool(in.Bool())
			}
		case "argv":
			if in.IsNull() {
				in.Skip()
				out.Argv = nil
			} else {
				in.Delim('[')
				if out.Argv == nil {
					if !in.IsDelim(']') {
						out.Argv = make([]string, 0, 4)
					} else {
						out.Argv = []string{}
					}
				} else {
					out.Argv = (out.Argv)[:0]
				}
				for !in.IsDelim(']') {
					var v51 string
					v51 = string(in.String())
					out.Argv = append(out.Argv, v51)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "args_truncated":
			if in.IsNull() {
				in.Skip()
				out.ArgsTruncated = nil
			} else {
				if out.ArgsTruncated == nil {
					out.ArgsTruncated = new(bool)
				}
				*out.ArgsTruncated = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel6(out *jwriter.Writer, in model.ModuleEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.LoadedFromMemory != nil {
		const prefix string = ",\"loaded_from_memory\":"
		out.RawString(prefix)
		out.Bool(bool(*in.LoadedFromMemory))
	}
	if len(in.Argv) != 0 {
		const prefix string = ",\"argv\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v52, v53 := range in.Argv {
				if v52 > 0 {
					out.RawByte(',')
				}
				out.String(string(v53))
			}
			out.RawByte(']')
		}
	}
	if in.ArgsTruncated != nil {
		const prefix string = ",\"args_truncated\":"
		out.RawString(prefix)
		out.Bool(bool(*in.ArgsTruncated))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel5(in *jlexer.Lexer, out *model.PTraceEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "request":
			out.Request = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "tracee":
			if in.IsNull() {
				in.Skip()
				out.Tracee = nil
			} else {
				if out.Tracee == nil {
					out.Tracee = new(model.ProcessContextSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel18(in, out.Tracee)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel5(out *jwriter.Writer, in model.PTraceEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"request\":"
		out.RawString(prefix[1:])
		out.String(string(in.Request))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	if in.Tracee != nil {
		const prefix string = ",\"tracee\":"
		out.RawString(prefix)
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel18(out, *in.Tracee)
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel4(in *jlexer.Lexer, out *model.MProtectEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vm_start":
			out.VMStart = string(in.String())
		case "vm_end":
			out.VMEnd = string(in.String())
		case "vm_protection":
			out.VMProtection = string(in.String())
		case "req_protection":
			out.ReqProtection = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel4(out *jwriter.Writer, in model.MProtectEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"vm_start\":"
		out.RawString(prefix[1:])
		out.String(string(in.VMStart))
	}
	{
		const prefix string = ",\"vm_end\":"
		out.RawString(prefix)
		out.String(string(in.VMEnd))
	}
	{
		const prefix string = ",\"vm_protection\":"
		out.RawString(prefix)
		out.String(string(in.VMProtection))
	}
	{
		const prefix string = ",\"req_protection\":"
		out.RawString(prefix)
		out.String(string(in.ReqProtection))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel3(in *jlexer.Lexer, out *model.MMapEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "offset":
			out.Offset = uint64(in.Uint64())
		case "length":
			out.Len = uint32(in.Uint32())
		case "protection":
			out.Protection = string(in.String())
		case "flags":
			out.Flags = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel3(out *jwriter.Writer, in model.MMapEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"offset\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Offset))
	}
	{
		const prefix string = ",\"length\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Len))
	}
	{
		const prefix string = ",\"protection\":"
		out.RawString(prefix)
		out.String(string(in.Protection))
	}
	{
		const prefix string = ",\"flags\":"
		out.RawString(prefix)
		out.String(string(in.Flags))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel2(in *jlexer.Lexer, out *model.BPFEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cmd":
			out.Cmd = string(in.String())
		case "map":
			if in.IsNull() {
				in.Skip()
				out.Map = nil
			} else {
				if out.Map == nil {
					out.Map = new(model.BPFMapSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel30(in, out.Map)
			}
		case "program":
			if in.IsNull() {
				in.Skip()
				out.Program = nil
			} else {
				if out.Program == nil {
					out.Program = new(model.BPFProgramSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel31(in, out.Program)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel2(out *jwriter.Writer, in model.BPFEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cmd\":"
		out.RawString(prefix[1:])
		out.String(string(in.Cmd))
	}
	if in.Map != nil {
		const prefix string = ",\"map\":"
		out.RawString(prefix)
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel30(out, *in.Map)
	}
	if in.Program != nil {
		const prefix string = ",\"program\":"
		out.RawString(prefix)
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel31(out, *in.Program)
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel31(in *jlexer.Lexer, out *model.BPFProgramSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "tag":
			out.Tag = string(in.String())
		case "program_type":
			out.ProgramType = string(in.String())
		case "attach_type":
			out.AttachType = string(in.String())
		case "helpers":
			if in.IsNull() {
				in.Skip()
				out.Helpers = nil
			} else {
				in.Delim('[')
				if out.Helpers == nil {
					if !in.IsDelim(']') {
						out.Helpers = make([]string, 0, 4)
					} else {
						out.Helpers = []string{}
					}
				} else {
					out.Helpers = (out.Helpers)[:0]
				}
				for !in.IsDelim(']') {
					var v54 string
					v54 = string(in.String())
					out.Helpers = append(out.Helpers, v54)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel31(out *jwriter.Writer, in model.BPFProgramSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Tag != "" {
		const prefix string = ",\"tag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Tag))
	}
	if in.ProgramType != "" {
		const prefix string = ",\"program_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProgramType))
	}
	if in.AttachType != "" {
		const prefix string = ",\"attach_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AttachType))
	}
	if len(in.Helpers) != 0 {
		const prefix string = ",\"helpers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v55, v56 := range in.Helpers {
				if v55 > 0 {
					out.RawByte(',')
				}
				out.String(string(v56))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel30(in *jlexer.Lexer, out *model.BPFMapSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "map_type":
			out.MapType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel30(out *jwriter.Writer, in model.BPFMapSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.MapType != "" {
		const prefix string = ",\"map_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MapType))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel1(in *jlexer.Lexer, out *model.SELinuxEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bool":
			if in.IsNull() {
				in.Skip()
				out.BoolChange = nil
			} else {
				if out.BoolChange == nil {
					out.BoolChange = new(model.SELinuxBoolChangeSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel32(in, out.BoolChange)
			}
		case "enforce":
			if in.IsNull() {
				in.Skip()
				out.EnforceStatus = nil
			} else {
				if out.EnforceStatus == nil {
					out.EnforceStatus = new(model.SELinuxEnforceStatusSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel33(in, out.EnforceStatus)
			}
		case "bool_commit":
			if in.IsNull() {
				in.Skip()
				out.BoolCommit = nil
			} else {
				if out.BoolCommit == nil {
					out.BoolCommit = new(model.SELinuxBoolCommitSerializer)
				}
				easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel34(in, out.BoolCommit)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel1(out *jwriter.Writer, in model.SELinuxEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BoolChange != nil {
		const prefix string = ",\"bool\":"
		first = false
		out.RawString(prefix[1:])
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel32(out, *in.BoolChange)
	}
	if in.EnforceStatus != nil {
		const prefix string = ",\"enforce\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel33(out, *in.EnforceStatus)
	}
	if in.BoolCommit != nil {
		const prefix string = ",\"bool_commit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel34(out, *in.BoolCommit)
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel34(in *jlexer.Lexer, out *model.SELinuxBoolCommitSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "state":
			out.State = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel34(out *jwriter.Writer, in model.SELinuxBoolCommitSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.State {
		const prefix string = ",\"state\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.State))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel33(in *jlexer.Lexer, out *model.SELinuxEnforceStatusSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel33(out *jwriter.Writer, in model.SELinuxEnforceStatusSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Status != "" {
		const prefix string = ",\"status\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	out.RawByte('}')
}
func easyjsonF642ad3eDecodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel32(in *jlexer.Lexer, out *model.SELinuxBoolChangeSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "state":
			out.State = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGithubComDataDogDatadogAgentPkgSecuritySerializersModel32(out *jwriter.Writer, in model.SELinuxBoolChangeSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.State != "" {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.State))
	}
	out.RawByte('}')
}
